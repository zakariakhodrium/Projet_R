#print(solution()== rotate90(grid_state()))
#transform all cells that are 2 to 0
test<-rotate90(grid_state())
test[test == 2] <- 0
if(all(test==solution())) {
showNotification("Congratulations! You have solved the game.", type = "message")
} else {
# If not all cells are filled, show a warning message
showNotification("The game is not yet solved. Keep trying!", type = "warning")
}
})
output$gridExists <- reactive({
!is.null(grid_state()) && !is.null(indications())
})
outputOptions(output, "gridExists", suspendWhenHidden = FALSE)
output$grid <- renderPlot({
# Draw the grid based on the state of each cell
if (!is.null(grid_state()) && !is.null(grid_size()) && !is.null(indications())) {
draw_grid(grid_state(), grid_size(), indications(), h_counter, v_counter)
}
}, res = 100)
observeEvent(input$grid_click, {
# Update the state of the clicked cell
if (!is.null(grid_state()) && !is.null(grid_size())) {
x <- floor(input$grid_click$x)
y <- floor(input$grid_click$y)
current_state <- grid_state()
if(current_state[x,y]==2){
current_state[x,y]=-1
}
current_state[x, y] <- current_state[x, y]+1
grid_state(current_state)
# Redraw the grid
draw_grid(grid_state(), grid_size(), indications(), h_counter, v_counter)
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
rotate90<-function(mat){
return (t(mat[,ncol(mat):1]))
}
nonogramecreate<-function(n,p)
{
y=0
indicationh=c()
indicationv=c()
compteurH=rep(0,n)
compteurV=rep(0,n)
matindichori=matrix(data = 0, nrow = n, ncol = floor(n/2)+1)
matindicvert=matrix(data = 0, nrow = floor(n/2)+1, ncol = n)
matrice<-rbinom(n*n,1,p)
X <- matrix(matrice, n, byrow = TRUE)
# Pour les lignes horizontales
for (i in 1:n) {
for(j in 1:n)
{
if (X[i,j]==1)
{
y=y+1
}
if (X[i,j]==0 & y!=0)
{
indicationh=append(indicationh,y)
y=0
compteurH[i]=compteurH[i]+1
}
}
if (y!=0)
{
indicationh=append(indicationh,y)
y=0
compteurH[i]=compteurH[i]+1
}
while (length(indicationh)<floor(n/2)+1)
{
indicationh=append(indicationh,NA)
}
matindichori[i,]=indicationh
matindichori[is.na(matindichori)] <- ""
indicationh=c()
}
# Pour les colonnes verticales
X_t = t(X) # Transposer la matrice
for (i in 1:n) {
for(j in 1:n)
{
if (X_t[i,j]==1)
{
y=y+1
}
if (X_t[i,j]==0 & y!=0)
{
indicationv=append(indicationv,y)
y=0
compteurV[i]=compteurV[i]+1
}
}
if (y!=0)
{
indicationv=append(indicationv,y)
y=0
compteurV[i]=compteurV[i]+1
}
while (length(indicationv)<floor(n/2)+1)
{
indicationv=append(indicationv,NA)
}
matindicvert[,i]=indicationv
matindicvert[is.na(matindicvert)] <- matindicvert
indicationv=c()
}
return(list(matindichori = matindichori, matindicvert = matindicvert, X = X, compteurH = compteurH, compteurV = compteurV))
}
n=10
p=0.7
result <- nonogramecreate(n, p)
#X_new<-nonograme_recreate(result$matindichori,result$matindicvert)
#print(result$X - X_new)
ligne <- 1
result
rotate90<-function(mat){
return (t(mat[,ncol(mat):1]))
}
nonogramecreate<-function(n,p)
{
y=0
indicationh=c()
indicationv=c()
compteurH=rep(0,n)
compteurV=rep(0,n)
matindichori=matrix(data = 0, nrow = n, ncol = floor(n/2)+1)
matindicvert=matrix(data = 0, nrow = floor(n/2)+1, ncol = n)
matrice<-rbinom(n*n,1,p)
X <- matrix(matrice, n, byrow = TRUE)
# Pour les lignes horizontales
for (i in 1:n) {
for(j in 1:n)
{
if (X[i,j]==1)
{
y=y+1
}
if (X[i,j]==0 & y!=0)
{
indicationh=append(indicationh,y)
y=0
compteurH[i]=compteurH[i]+1
}
}
if (y!=0)
{
indicationh=append(indicationh,y)
y=0
compteurH[i]=compteurH[i]+1
}
while (length(indicationh)<floor(n/2)+1)
{
indicationh=append(indicationh,NA)
}
matindichori[i,]=indicationh
matindichori[is.na(matindichori)] <- ""
indicationh=c()
}
# Pour les colonnes verticales
X_t = t(X) # Transposer la matrice
for (i in 1:n) {
for(j in 1:n)
{
if (X_t[i,j]==1)
{
y=y+1
}
if (X_t[i,j]==0 & y!=0)
{
indicationv=append(indicationv,y)
y=0
compteurV[i]=compteurV[i]+1
}
}
if (y!=0)
{
indicationv=append(indicationv,y)
y=0
compteurV[i]=compteurV[i]+1
}
while (length(indicationv)<floor(n/2)+1)
{
indicationv=append(indicationv,NA)
}
matindicvert[,i]=indicationv
matindicvert[is.na(matindicvert)] <- ""
indicationv=c()
}
return(list(matindichori = matindichori, matindicvert = matindicvert, X = X, compteurH = compteurH, compteurV = compteurV))
}
n=10
p=0.7
result <- nonogramecreate(n, p)
#X_new<-nonograme_recreate(result$matindichori,result$matindicvert)
#print(result$X - X_new)
ligne <- 1
result
library(shiny)
# Function to draw the grid
draw_grid <- function(grid_state, gridSize, indications,h_counter,v_counter) {
# Define margins to accommodate the indications
par(mar = c(0, gridSize, 0, 0))
for (i in 1:gridSize) {
text(x = i, y = gridSize+0.5, paste(result$matindicvert[,i], collapse = " "), adj = c(1, 0.5), font = 2)
text(x = 1, y = i, paste(result$matindichori[i,], collapse = " "), adj = c(0.5, 1), font = 2)
}
plot(1:gridSize, 1:gridSize, type = "n", xlab = "", ylab = "", xaxt = 'n', yaxt = 'n', xlim = c(1, gridSize+1 ), ylim = c(1, gridSize+1 ))
for(x in 1:gridSize) {
for(y in 1:gridSize) {
# Draw the rectangle with a border first
rect(x, y, x + 1, y + 1, col = ifelse(grid_state[x, y] == 1, "black", "white"), border = "black", lwd = 2)
# Then draw the lines if needed
if(grid_state[x, y] == 2) {
offset = 0.1  # Define an offset
lines(c(x + offset, x + 1 - offset), c(y + offset, y + 1 - offset), col = "red", lwd = 2)
lines(c(x + 1 - offset, x + offset), c(y + offset, y + 1 - offset), col = "red", lwd = 2)
}
}
}
}
ui <- fluidPage(
titlePanel("Nonogram"),
tags$style(type="text/css", "#controls { width: 60%; margin: 0 auto; }"),
fluidRow(
column(12,
wellPanel(
conditionalPanel(
condition = "output.gridExists",
plotOutput("grid", click = "grid_click")
),
conditionalPanel(
condition = "!output.gridExists",
tags$div(
style = "text-align: center; padding: 50px;",
tags$h1("Welcome to Nonogram!", style = "color: #3399FF;"),
tags$p("Please select the parameters and create the game.", style = "font-size: 20px;")
)
)
)
),
div(id = "controls",
wellPanel(
sliderInput("gridSize", "Grid size", min = 5, max = 20, value = 5),
sliderInput("p", "Probability", min = 0.1, max = 0.9, value = 0.5),
actionButton("update", "Create game", style = "background-color: red; color: white;"),  # Add the update button with red background
actionButton("verify", "Verify", style = "background-color: green; color: white;")  # Add the solve button with green background
)
)
)
)
# Server
server <- function(input, output, session) {
# Reactive values for the grid size, grid state, indications and counters
grid_size <- reactiveVal()
grid_state <- reactiveVal()
indications <- reactiveVal()
h_counter <- reactiveVal()
v_counter <- reactiveVal()
solution <- reactiveVal()
observeEvent(input$update, {  # Listen for clicks on the update button
grid_size(input$gridSize)  # Update grid size
result <- nonogramecreate(grid_size(), input$p)
solution(result$X)  # Store the solution
#print(solution)
indications(list(horizontal = result$matindichori))#, vertical = result$matindicvert))  # Update indications
h_counter(result$compteurH)  # Update horizontal counter
v_counter(result$compteurV)  # Update vertical counter
grid_state(matrix(0, nrow = grid_size(), ncol = grid_size()))  # Initialize grid_state with a blank grid
})
observeEvent(input$verify, {  # Listen for clicks on the verify button
print(rotate90(grid_state()))
#print(solution()== rotate90(grid_state()))
#transform all cells that are 2 to 0
test<-rotate90(grid_state())
test[test == 2] <- 0
if(all(test==solution())) {
showNotification("Congratulations! You have solved the game.", type = "message")
} else {
# If not all cells are filled, show a warning message
showNotification("The game is not yet solved. Keep trying!", type = "warning")
}
})
output$gridExists <- reactive({
!is.null(grid_state()) && !is.null(indications())
})
outputOptions(output, "gridExists", suspendWhenHidden = FALSE)
output$grid <- renderPlot({
# Draw the grid based on the state of each cell
if (!is.null(grid_state()) && !is.null(grid_size()) && !is.null(indications())) {
draw_grid(grid_state(), grid_size(), indications(), h_counter, v_counter)
}
}, res = 100)
observeEvent(input$grid_click, {
# Update the state of the clicked cell
if (!is.null(grid_state()) && !is.null(grid_size())) {
x <- floor(input$grid_click$x)
y <- floor(input$grid_click$y)
current_state <- grid_state()
if(current_state[x,y]==2){
current_state[x,y]=-1
}
current_state[x, y] <- current_state[x, y]+1
grid_state(current_state)
# Redraw the grid
draw_grid(grid_state(), grid_size(), indications(), h_counter, v_counter)
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
# Function to draw the grid
draw_grid <- function(grid_state, gridSize, indications,h_counter,v_counter) {
plot(1:gridSize, 1:gridSize, type = "n", xlab = "", ylab = "", xaxt = 'n', yaxt = 'n', xlim = c(1, gridSize+1 ), ylim = c(1, gridSize+1 ))
for(x in 1:gridSize) {
for(y in 1:gridSize) {
# Draw the rectangle with a border first
rect(x, y, x + 1, y + 1, col = ifelse(grid_state[x, y] == 1, "black", "white"), border = "black", lwd = 2)
# Then draw the lines if needed
if(grid_state[x, y] == 2) {
offset = 0.1  # Define an offset
lines(c(x + offset, x + 1 - offset), c(y + offset, y + 1 - offset), col = "red", lwd = 2)
lines(c(x + 1 - offset, x + offset), c(y + offset, y + 1 - offset), col = "red", lwd = 2)
}
}
}
# Define margins to accommodate the indications
par(mar = c(0, gridSize, 0, 0))
for (i in 1:gridSize) {
text(x = i, y = gridSize+0.5, paste(result$matindicvert[,i], collapse = " "), adj = c(1, 0.5), font = 2)
text(x = 1, y = i, paste(result$matindichori[i,], collapse = " "), adj = c(0.5, 1), font = 2)
}
}
ui <- fluidPage(
titlePanel("Nonogram"),
tags$style(type="text/css", "#controls { width: 60%; margin: 0 auto; }"),
fluidRow(
column(12,
wellPanel(
conditionalPanel(
condition = "output.gridExists",
plotOutput("grid", click = "grid_click")
),
conditionalPanel(
condition = "!output.gridExists",
tags$div(
style = "text-align: center; padding: 50px;",
tags$h1("Welcome to Nonogram!", style = "color: #3399FF;"),
tags$p("Please select the parameters and create the game.", style = "font-size: 20px;")
)
)
)
),
div(id = "controls",
wellPanel(
sliderInput("gridSize", "Grid size", min = 5, max = 20, value = 5),
sliderInput("p", "Probability", min = 0.1, max = 0.9, value = 0.5),
actionButton("update", "Create game", style = "background-color: red; color: white;"),  # Add the update button with red background
actionButton("verify", "Verify", style = "background-color: green; color: white;")  # Add the solve button with green background
)
)
)
)
# Server
server <- function(input, output, session) {
# Reactive values for the grid size, grid state, indications and counters
grid_size <- reactiveVal()
grid_state <- reactiveVal()
indications <- reactiveVal()
h_counter <- reactiveVal()
v_counter <- reactiveVal()
solution <- reactiveVal()
observeEvent(input$update, {  # Listen for clicks on the update button
grid_size(input$gridSize)  # Update grid size
result <- nonogramecreate(grid_size(), input$p)
solution(result$X)  # Store the solution
#print(solution)
indications(list(horizontal = result$matindichori))#, vertical = result$matindicvert))  # Update indications
h_counter(result$compteurH)  # Update horizontal counter
v_counter(result$compteurV)  # Update vertical counter
grid_state(matrix(0, nrow = grid_size(), ncol = grid_size()))  # Initialize grid_state with a blank grid
})
observeEvent(input$verify, {  # Listen for clicks on the verify button
print(rotate90(grid_state()))
#print(solution()== rotate90(grid_state()))
#transform all cells that are 2 to 0
test<-rotate90(grid_state())
test[test == 2] <- 0
if(all(test==solution())) {
showNotification("Congratulations! You have solved the game.", type = "message")
} else {
# If not all cells are filled, show a warning message
showNotification("The game is not yet solved. Keep trying!", type = "warning")
}
})
output$gridExists <- reactive({
!is.null(grid_state()) && !is.null(indications())
})
outputOptions(output, "gridExists", suspendWhenHidden = FALSE)
output$grid <- renderPlot({
# Draw the grid based on the state of each cell
if (!is.null(grid_state()) && !is.null(grid_size()) && !is.null(indications())) {
draw_grid(grid_state(), grid_size(), indications(), h_counter, v_counter)
}
}, res = 100)
observeEvent(input$grid_click, {
# Update the state of the clicked cell
if (!is.null(grid_state()) && !is.null(grid_size())) {
x <- floor(input$grid_click$x)
y <- floor(input$grid_click$y)
current_state <- grid_state()
if(current_state[x,y]==2){
current_state[x,y]=-1
}
current_state[x, y] <- current_state[x, y]+1
grid_state(current_state)
# Redraw the grid
draw_grid(grid_state(), grid_size(), indications(), h_counter, v_counter)
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
getwd()
1+1
pi
3pi
3*pi
exp(pi)
help(mean)
q()
source("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross/R/Functions.R", echo=TRUE)
source("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross/R/UI_Server.R", echo=TRUE)
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
source("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross/R/Functions.R", echo=TRUE)
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
source("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross/R/UI_Server.R", echo=TRUE)
source("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross/R/UI_Server.R", echo=TRUE)
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
source("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross/R/UI_Server.R", echo=TRUE)
source("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross/R/UI_Server.R", echo=TRUE)
install.packages("shiny")
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
install.packages("htmltools")
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
install.packages("htmltools", version = "0.5.8", repos = "https://cran.r-project.org")
install.packages("htmltools", version = "0.5.8", repos = "https://cran.r-project.org")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
.Last.error
install.packages("htmltools")
install.packages("htmltools")
remove.packages("htmltools")
install.packages("htmltools")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
library(Picross_R)
runApp('C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross/R/UI_Server.R')
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
Picross_R::PicrossR()
source("~/.active-rstudio-document", echo=TRUE)
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
PicrossR::rotate90()
Picross_R::Picross_r()
source("~/.active-rstudio-document", echo=TRUE)
devtools::document("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
PicrossR::Piccross_R()
remove.packages(Piccross_R())
remove.packages(Piccross_R)
remove.packages("Picross_R")
remove.packages("Picross_R")
find.package("Picross_R")
library(PicrossR)
PicrossR::Piccross_R()
devtools::update_packages("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
devtools::install("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
library(PicrossR)
devtools::build("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
setwd("C:/Users/zakar/OneDrive/Desktop/Studying v4.0/Semestre 2/Piccross_R/RPiccross")
PiccrossR::Piccross_R()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
